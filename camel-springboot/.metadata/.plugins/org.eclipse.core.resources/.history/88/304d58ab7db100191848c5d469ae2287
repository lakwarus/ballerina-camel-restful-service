package com.lakwarus.sample.pojo;

import java.util.HashMap;
import java.util.Map;
import org.apache.camel.Exchange;
import com.fasterxml.jackson.core.JsonParseException;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
//import org.apache.camel.component.jackson.JacksonDataFormat;
//import org.apache.camel.model.dataformat.JsonLibrary;
import org.apache.camel.model.rest.RestBindingMode;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.stereotype.Component;

@SpringBootApplication
public class SpringbootCamelRestdslApplication {

	// Order management is done using an in-memory map.
	Map<String, Order> objectmap;

	public SpringbootCamelRestdslApplication() {
		objectmap = new HashMap<String, Order>();
	}

	public static void main(String[] args) {
		SpringApplication.run(SpringbootCamelRestdslApplication.class, args);
	}

	// JSON Data Format
	// JacksonDataFormat jsonDataFormat = new JacksonDataFormat(Order.class);

	@Component
	class OrderRoute extends RouteBuilder {

		@Override
		public void configure() throws Exception {

			restConfiguration().component("servlet").bindingMode(RestBindingMode.json);

			// Resource that handles the HTTP POST requests that are directed to the path
		    // '/order' to create a new Order.
			rest("/ordermgt").consumes("application/json").post("/order").type(Order.class).to("direct:addOrder");

			// Resource that handles the HTTP GET requests that are directed to a specific
		    // order using path '/order/<orderId>'.
			rest("/ordermgt").get("/order/{orderId}").to("direct:getOrder");
			
			// Resource that handles the HTTP PUT requests that are directed to the path
		    // '/order/<orderId>' to update an existing Order.
			rest("/ordermgt").consumes("application/json").put("/order/{orderId}").to("direct:putOrder");
			
			// Resource that handles the HTTP DELETE requests, which are directed to the path
		    // '/order/<orderId>' to delete an existing Order.
			rest("/ordermgt").delete("/order/{orderId}").to("direct:removeOrder");


			from("direct:addOrder").doTry().process(new Processor() {

				@Override
				public void process(Exchange exchange){

					Order order = exchange.getIn().getBody(Order.class);
					String orderId = order.getId();
					objectmap.put(orderId, order);

					// Create response message.
					exchange.getIn().setBody("Order Created!");

					exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "text/plain");
					// Set 201 Created status code in the response message.
					exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 201);
					// Set 'Location' header in the response message.
					// This can be used by the client to locate the newly added order.
					exchange.getIn().setHeader("Location", "http://localhost:8080/ordermgt/order/" + orderId);
				}
			}).doCatch(Exception.class).process(new Processor() {

				public void process(Exchange exchange) throws Exception {
					exchange.getIn().setBody("Invalid JSON recevied");
					exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "text/plain");
					exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 400);

				}
			}).log("AddOrder error : Invalid JSON recevied!");

			from("direct:getOrder").process(new Processor() {

				@Override
				public void process(Exchange exchange){

			        // Find the requested order from the map and retrieve it in JSON format.
					String orderId = exchange.getIn().getHeader("orderId", String.class);
					Order order = objectmap.get(orderId);
					if (order == null) {
						exchange.getIn().setBody("Order : " + orderId + " cannot be found");
						exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "text/plain");
						exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 400);
					} else {
						exchange.getIn().setBody(order, Order.class);
						exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json");
						exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
					}

				}
			});
			
			
			from("direct:putOrder").process(new Processor() {

				@Override
				public void process(Exchange exchange){

			        // Find the requested order from the map and retrieve it in JSON format.
					String orderId = exchange.getIn().getHeader("orderId", String.class);
					Order order = objectmap.get(orderId);
					if (order == null) {
						exchange.getIn().setBody("Order : " + orderId + " cannot be found");
						exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "text/plain");
						exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 400);
					} else {
						exchange.getIn().setBody(order, Order.class);
						exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json");
						exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
					}

				}
			});
			
		}
	}

}
